# Script de Hardening de Seguran√ßa - Just Dance Event Hub
# Execute como Administrador

param(
    [switch]$ApplyAll = $false,
    [switch]$NetworkSecurity = $false,
    [switch]$SystemHardening = $false,
    [switch]$ApplicationSecurity = $false,
    [switch]$AuditSecurity = $false,
    [switch]$Help = $false
)

# Cores para output
$Red = "Red"
$Green = "Green"
$Yellow = "Yellow"
$Blue = "Cyan"
$NC = "White"

# Vari√°veis
$APP_NAME = "just-dance-hub"
$APP_DIR = "C:\opt\$APP_NAME"
$LOG_FILE = "$APP_DIR\security-hardening.log"

# Fun√ß√µes de logging
function Write-Log {
    param([string]$Message, [string]$Level = "INFO")
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    $logMessage = "[$timestamp] [$Level] $Message"
    Write-Host $logMessage -ForegroundColor $Green
    Add-Content -Path $LOG_FILE -Value $logMessage -ErrorAction SilentlyContinue
}

function Write-Error-Log {
    param([string]$Message)
    Write-Log $Message "ERROR"
    Write-Host $Message -ForegroundColor $Red
}

function Write-Warning-Log {
    param([string]$Message)
    Write-Log $Message "WARN"
    Write-Host $Message -ForegroundColor $Yellow
}

function Write-Info {
    param([string]$Message)
    Write-Host $Message -ForegroundColor $Blue
}

# Fun√ß√£o de ajuda
function Show-Help {
    Write-Host "Just Dance Event Hub - Script de Hardening de Seguran√ßa" -ForegroundColor $Blue
    Write-Host ""
    Write-Host "Uso:" -ForegroundColor $Yellow
    Write-Host "  .\security-hardening.ps1 [op√ß√µes]"
    Write-Host ""
    Write-Host "Op√ß√µes:" -ForegroundColor $Yellow
    Write-Host "  -ApplyAll           Aplicar todas as configura√ß√µes de seguran√ßa"
    Write-Host "  -NetworkSecurity    Configurar seguran√ßa de rede"
    Write-Host "  -SystemHardening    Aplicar hardening do sistema"
    Write-Host "  -ApplicationSecurity Configurar seguran√ßa da aplica√ß√£o"
    Write-Host "  -AuditSecurity      Configurar auditoria e logs de seguran√ßa"
    Write-Host "  -Help               Mostrar esta ajuda"
    Write-Host ""
    Write-Host "Exemplos:" -ForegroundColor $Yellow
    Write-Host "  .\security-hardening.ps1 -ApplyAll"
    Write-Host "  .\security-hardening.ps1 -NetworkSecurity -SystemHardening"
    exit 0
}

# Verificar se √© administrador
function Test-Administrator {
    $currentUser = [Security.Principal.WindowsIdentity]::GetCurrent()
    $principal = New-Object Security.Principal.WindowsPrincipal($currentUser)
    return $principal.IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
}

# Configura√ß√µes de Seguran√ßa de Rede
function Set-NetworkSecurity {
    Write-Info "üîí Configurando seguran√ßa de rede..."
    
    try {
        # Configurar firewall avan√ßado
        Write-Log "Configurando Windows Firewall..."
        
        # Habilitar firewall para todos os perfis
        netsh advfirewall set allprofiles state on
        
        # Configurar regras de entrada padr√£o
        netsh advfirewall set allprofiles firewallpolicy blockinbound,allowoutbound
        
        # Bloquear portas desnecess√°rias
        $dangerousPorts = @(135, 139, 445, 1433, 1434, 3389, 5985, 5986)
        foreach ($port in $dangerousPorts) {
            netsh advfirewall firewall add rule name="Block Port $port" dir=in action=block protocol=TCP localport=$port
        }
        
        # Permitir apenas portas necess√°rias para a aplica√ß√£o
        New-NetFirewallRule -DisplayName "Just Dance Hub HTTP" -Direction Inbound -Protocol TCP -LocalPort 80 -Action Allow -Profile Any
        New-NetFirewallRule -DisplayName "Just Dance Hub HTTPS" -Direction Inbound -Protocol TCP -LocalPort 443 -Action Allow -Profile Any
        New-NetFirewallRule -DisplayName "Just Dance Hub App" -Direction Inbound -Protocol TCP -LocalPort 3000 -Action Allow -Profile Any -RemoteAddress LocalSubnet
        New-NetFirewallRule -DisplayName "Just Dance Hub WebSocket" -Direction Inbound -Protocol TCP -LocalPort 8080 -Action Allow -Profile Any -RemoteAddress LocalSubnet
        
        # Configurar prote√ß√£o contra DDoS
        netsh int ipv4 set global taskoffload=disabled
        netsh int ipv4 set global chimney=disabled
        
        # Desabilitar NetBIOS sobre TCP/IP
        $adapters = Get-WmiObject -Class Win32_NetworkAdapterConfiguration | Where-Object { $_.IPEnabled -eq $true }
        foreach ($adapter in $adapters) {
            $adapter.SetTcpipNetbios(2)  # 2 = Disable NetBIOS over TCP/IP
        }
        
        Write-Log "Seguran√ßa de rede configurada com sucesso"
        
    } catch {
        Write-Error-Log "Erro ao configurar seguran√ßa de rede: $_"
    }
}

# Hardening do Sistema
function Set-SystemHardening {
    Write-Info "üõ°Ô∏è Aplicando hardening do sistema..."
    
    try {
        # Configura√ß√µes de registro para seguran√ßa
        Write-Log "Aplicando configura√ß√µes de registro..."
        
        # Desabilitar SMBv1
        Set-ItemProperty -Path "HKLM:\SYSTEM\CurrentControlSet\Services\lanmanserver\parameters" -Name "SMB1" -Value 0 -Force
        
        # Configurar pol√≠tica de senhas
        secedit /export /cfg c:\temp\secpol.cfg
        (Get-Content c:\temp\secpol.cfg) -replace "MinimumPasswordLength = \d+", "MinimumPasswordLength = 12" | Set-Content c:\temp\secpol.cfg
        (Get-Content c:\temp\secpol.cfg) -replace "PasswordComplexity = \d+", "PasswordComplexity = 1" | Set-Content c:\temp\secpol.cfg
        secedit /configure /db c:\windows\security\local.sdb /cfg c:\temp\secpol.cfg /areas SECURITYPOLICY
        Remove-Item c:\temp\secpol.cfg -Force
        
        # Desabilitar servi√ßos desnecess√°rios
        $servicesToDisable = @(
            "Fax",
            "TelnetD",
            "RemoteRegistry",
            "Messenger",
            "NetMeeting Remote Desktop Sharing",
            "Remote Desktop Help Session Manager",
            "Routing and Remote Access",
            "Simple Mail Transfer Protocol (SMTP)",
            "SNMP Service",
            "SSDP Discovery Service",
            "Universal Plug and Play Device Host",
            "Web Client",
            "Windows Media Player Network Sharing Service"
        )
        
        foreach ($service in $servicesToDisable) {
            try {
                Stop-Service -Name $service -Force -ErrorAction SilentlyContinue
                Set-Service -Name $service -StartupType Disabled -ErrorAction SilentlyContinue
                Write-Log "Servi√ßo desabilitado: $service"
            } catch {
                Write-Warning-Log "N√£o foi poss√≠vel desabilitar o servi√ßo: $service"
            }
        }
        
        # Configurar UAC
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "ConsentPromptBehaviorAdmin" -Value 2
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "ConsentPromptBehaviorUser" -Value 3
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\System" -Name "EnableLUA" -Value 1
        
        # Desabilitar AutoRun/AutoPlay
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer" -Name "NoDriveTypeAutoRun" -Value 255
        Set-ItemProperty -Path "HKCU:\SOFTWARE\Microsoft\Windows\CurrentVersion\Policies\Explorer" -Name "NoDriveTypeAutoRun" -Value 255
        
        # Configurar Windows Update para autom√°tico
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" -Name "AUOptions" -Value 4
        Set-ItemProperty -Path "HKLM:\SOFTWARE\Policies\Microsoft\Windows\WindowsUpdate\AU" -Name "AutoInstallMinorUpdates" -Value 1
        
        Write-Log "Hardening do sistema aplicado com sucesso"
        
    } catch {
        Write-Error-Log "Erro ao aplicar hardening do sistema: $_"
    }
}

# Seguran√ßa da Aplica√ß√£o
function Set-ApplicationSecurity {
    Write-Info "üîê Configurando seguran√ßa da aplica√ß√£o..."
    
    try {
        # Configurar permiss√µes de arquivos
        Write-Log "Configurando permiss√µes de arquivos..."
        
        # Remover permiss√µes desnecess√°rias do diret√≥rio da aplica√ß√£o
        icacls "$APP_DIR" /inheritance:d
        icacls "$APP_DIR" /grant:r "Administrators:F"
        icacls "$APP_DIR" /grant:r "SYSTEM:F"
        icacls "$APP_DIR" /grant:r "Users:RX"
        icacls "$APP_DIR" /remove "Everyone"
        
        # Proteger arquivos de configura√ß√£o
        icacls "$APP_DIR\backend\.env" /inheritance:d
        icacls "$APP_DIR\backend\.env" /grant:r "Administrators:F"
        icacls "$APP_DIR\backend\.env" /grant:r "SYSTEM:F"
        icacls "$APP_DIR\backend\.env" /remove "Users"
        icacls "$APP_DIR\backend\.env" /remove "Everyone"
        
        # Configurar permiss√µes de logs
        icacls "C:\logs\$APP_NAME" /inheritance:d
        icacls "C:\logs\$APP_NAME" /grant:r "Administrators:F"
        icacls "C:\logs\$APP_NAME" /grant:r "SYSTEM:F"
        icacls "C:\logs\$APP_NAME" /grant:r "Users:RX"
        
        # Criar arquivo de configura√ß√£o de seguran√ßa para Node.js
        $nodeSecurityConfig = @"
// Configura√ß√µes de Seguran√ßa Node.js
process.env.NODE_OPTIONS = '--max-old-space-size=1024 --max-http-header-size=8192';

// Configurar timeouts
process.env.HTTP_TIMEOUT = '30000';
process.env.KEEP_ALIVE_TIMEOUT = '5000';

// Configurar limites
process.env.MAX_CONNECTIONS = '1000';
process.env.MAX_REQUESTS_PER_SOCKET = '100';
"@
        
        Set-Content -Path "$APP_DIR\backend\security.js" -Value $nodeSecurityConfig
        
        # Configurar Content Security Policy
        $cspConfig = @"
// Content Security Policy
const cspOptions = {
  directives: {
    defaultSrc: ["'self'"],
    scriptSrc: ["'self'", "'unsafe-inline'"],
    styleSrc: ["'self'", "'unsafe-inline'"],
    imgSrc: ["'self'", "data:"],
    connectSrc: ["'self'", "ws:", "wss:"],
    fontSrc: ["'self'"],
    objectSrc: ["'none'"],
    mediaSrc: ["'self'"],
    frameSrc: ["'none'"],
    upgradeInsecureRequests: []
  }
};

module.exports = cspOptions;
"@
        
        Set-Content -Path "$APP_DIR\backend\csp-config.js" -Value $cspConfig
        
        Write-Log "Seguran√ßa da aplica√ß√£o configurada com sucesso"
        
    } catch {
        Write-Error-Log "Erro ao configurar seguran√ßa da aplica√ß√£o: $_"
    }
}

# Configurar Auditoria e Logs de Seguran√ßa
function Set-AuditSecurity {
    Write-Info "üìä Configurando auditoria e logs de seguran√ßa..."
    
    try {
        # Habilitar auditoria de eventos de seguran√ßa
        Write-Log "Configurando auditoria de eventos..."
        
        auditpol /set /category:"Logon/Logoff" /success:enable /failure:enable
        auditpol /set /category:"Account Logon" /success:enable /failure:enable
        auditpol /set /category:"Account Management" /success:enable /failure:enable
        auditpol /set /category:"Privilege Use" /success:enable /failure:enable
        auditpol /set /category:"Policy Change" /success:enable /failure:enable
        auditpol /set /category:"System" /success:enable /failure:enable
        
        # Configurar tamanho dos logs de eventos
        wevtutil sl Security /ms:104857600  # 100MB
        wevtutil sl System /ms:104857600    # 100MB
        wevtutil sl Application /ms:104857600 # 100MB
        
        # Criar script de monitoramento de seguran√ßa
        $securityMonitorScript = @"
# Script de Monitoramento de Seguran√ßa
`$logPath = "C:\logs\$APP_NAME\security-monitor.log"
`$timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"

# Verificar tentativas de login falhadas
`$failedLogins = Get-WinEvent -FilterHashtable @{LogName='Security'; ID=4625; StartTime=(Get-Date).AddHours(-1)} -ErrorAction SilentlyContinue
if (`$failedLogins) {
    `$count = (`$failedLogins | Measure-Object).Count
    Add-Content -Path `$logPath -Value "`$timestamp - ALERT: `$count tentativas de login falhadas na √∫ltima hora"
}

# Verificar mudan√ßas de pol√≠tica
`$policyChanges = Get-WinEvent -FilterHashtable @{LogName='Security'; ID=4719; StartTime=(Get-Date).AddHours(-1)} -ErrorAction SilentlyContinue
if (`$policyChanges) {
    Add-Content -Path `$logPath -Value "`$timestamp - ALERT: Mudan√ßas de pol√≠tica detectadas"
}

# Verificar uso de privil√©gios administrativos
`$adminPrivUse = Get-WinEvent -FilterHashtable @{LogName='Security'; ID=4672; StartTime=(Get-Date).AddHours(-1)} -ErrorAction SilentlyContinue
if (`$adminPrivUse) {
    `$count = (`$adminPrivUse | Measure-Object).Count
    Add-Content -Path `$logPath -Value "`$timestamp - INFO: `$count usos de privil√©gios administrativos na √∫ltima hora"
}

# Verificar processos suspeitos
`$suspiciousProcesses = Get-Process | Where-Object { `$_.ProcessName -match "(cmd|powershell|wscript|cscript)" -and `$_.CPU -gt 10 }
if (`$suspiciousProcesses) {
    foreach (`$proc in `$suspiciousProcesses) {
        Add-Content -Path `$logPath -Value "`$timestamp - WARNING: Processo suspeito detectado: `$(`$proc.ProcessName) (PID: `$(`$proc.Id))"
    }
}

# Verificar conex√µes de rede suspeitas
`$suspiciousConnections = Get-NetTCPConnection | Where-Object { `$_.State -eq "Established" -and `$_.RemotePort -in @(4444, 5555, 6666, 7777, 8888, 9999) }
if (`$suspiciousConnections) {
    foreach (`$conn in `$suspiciousConnections) {
        Add-Content -Path `$logPath -Value "`$timestamp - ALERT: Conex√£o suspeita detectada: `$(`$conn.RemoteAddress):`$(`$conn.RemotePort)"
    }
}

Write-Host "Monitoramento de seguran√ßa executado em `$timestamp"
"@
        
        Set-Content -Path "$APP_DIR\security-monitor.ps1" -Value $securityMonitorScript
        
        # Configurar tarefa agendada para monitoramento
        $action = New-ScheduledTaskAction -Execute "PowerShell.exe" -Argument "-File $APP_DIR\security-monitor.ps1"
        $trigger = New-ScheduledTaskTrigger -RepetitionInterval (New-TimeSpan -Minutes 15) -Once -At (Get-Date)
        $settings = New-ScheduledTaskSettingsSet -AllowStartIfOnBatteries -DontStopIfGoingOnBatteries
        
        Register-ScheduledTask -TaskName "JustDanceHub-SecurityMonitor" -Action $action -Trigger $trigger -Settings $settings -Force
        
        Write-Log "Auditoria e logs de seguran√ßa configurados com sucesso"
        
    } catch {
        Write-Error-Log "Erro ao configurar auditoria: $_"
    }
}

# Fun√ß√£o para gerar relat√≥rio de seguran√ßa
function New-SecurityReport {
    Write-Info "üìã Gerando relat√≥rio de seguran√ßa..."
    
    $reportPath = "$APP_DIR\security-report-$(Get-Date -Format 'yyyyMMdd-HHmmss').txt"
    
    $report = @"
RELAT√ìRIO DE SEGURAN√áA - JUST DANCE EVENT HUB
Gerado em: $(Get-Date -Format 'yyyy-MM-dd HH:mm:ss')

=== CONFIGURA√á√ïES DE FIREWALL ===
$(netsh advfirewall show allprofiles)

=== SERVI√áOS EM EXECU√á√ÉO ===
$(Get-Service | Where-Object {$_.Status -eq 'Running'} | Select-Object Name, Status | Format-Table -AutoSize | Out-String)

=== CONEX√ïES DE REDE ATIVAS ===
$(Get-NetTCPConnection | Where-Object {$_.State -eq 'Established'} | Select-Object LocalAddress, LocalPort, RemoteAddress, RemotePort | Format-Table -AutoSize | Out-String)

=== USU√ÅRIOS LOCAIS ===
$(Get-LocalUser | Select-Object Name, Enabled, LastLogon | Format-Table -AutoSize | Out-String)

=== POL√çTICAS DE AUDITORIA ===
$(auditpol /get /category:*)

=== ATUALIZA√á√ïES PENDENTES ===
$(Get-WindowsUpdate -ErrorAction SilentlyContinue | Select-Object Title, Size | Format-Table -AutoSize | Out-String)

=== VERIFICA√á√ÉO DE INTEGRIDADE ===
Data da √∫ltima verifica√ß√£o: $(Get-Date)
Status: OK
"@
    
    Set-Content -Path $reportPath -Value $report
    Write-Log "Relat√≥rio de seguran√ßa gerado: $reportPath"
}

# Fun√ß√£o principal
function Main {
    if ($Help) {
        Show-Help
    }
    
    if (-not (Test-Administrator)) {
        Write-Error-Log "Este script deve ser executado como Administrador"
        exit 1
    }
    
    Write-Info "Iniciando hardening de seguran√ßa do Just Dance Event Hub..."
    
    # Criar diret√≥rio de logs se n√£o existir
    New-Item -ItemType Directory -Force -Path (Split-Path $LOG_FILE -Parent)
    
    if ($ApplyAll -or $NetworkSecurity) {
        Set-NetworkSecurity
    }
    
    if ($ApplyAll -or $SystemHardening) {
        Set-SystemHardening
    }
    
    if ($ApplyAll -or $ApplicationSecurity) {
        Set-ApplicationSecurity
    }
    
    if ($ApplyAll -or $AuditSecurity) {
        Set-AuditSecurity
    }
    
    # Gerar relat√≥rio de seguran√ßa
    New-SecurityReport
    
    Write-Host ""
    Write-Host "=== HARDENING DE SEGURAN√áA CONCLU√çDO ===" -ForegroundColor $Green
    Write-Host ""
    Write-Host "üîí Configura√ß√µes aplicadas com sucesso!" -ForegroundColor $Blue
    Write-Host ""
    Write-Host "üìã Pr√≥ximos passos recomendados:" -ForegroundColor $Yellow
    Write-Host "  ‚Ä¢ Reiniciar o sistema para aplicar todas as mudan√ßas"
    Write-Host "  ‚Ä¢ Testar a aplica√ß√£o ap√≥s o rein√≠cio"
    Write-Host "  ‚Ä¢ Revisar logs de seguran√ßa regularmente"
    Write-Host "  ‚Ä¢ Manter sistema e aplica√ß√£o atualizados"
    Write-Host "  ‚Ä¢ Realizar testes de penetra√ß√£o periodicamente"
    Write-Host ""
    Write-Host "üìä Monitoramento configurado:" -ForegroundColor $Yellow
    Write-Host "  ‚Ä¢ Verifica√ß√£o de seguran√ßa a cada 15 minutos"
    Write-Host "  ‚Ä¢ Logs em: C:\logs\$APP_NAME\security-monitor.log"
    Write-Host "  ‚Ä¢ Relat√≥rio gerado em: $APP_DIR"
    Write-Host ""
    
    Write-Log "Hardening de seguran√ßa conclu√≠do com sucesso!"
}

# Executar fun√ß√£o principal
Main